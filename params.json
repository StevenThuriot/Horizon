{"name":"Horizon","tagline":".NET Fast Very Late Binding invoker","body":"…Reflection made easy …And fast!\r\n\r\n# Basically…\r\n## Reflection is hard… And dreadfully slow!\r\n\r\nHorizon addresses these issues by supplying a **simple to use** API.\r\n\r\nUnderneath the covers, Horizon will create and cache **Expression Trees**. This means there will be a small *one time hit* which will be hardly noticeable. \r\n\r\n### From then on, Horizon will be **blazing fast**!\r\n\r\nAs if that wasn't enough, Horizon also supports the *DLR's Binders*, making it super easy to plug it into your very own *DynamicObject*s! Hooray!\r\n\r\n## So what exactly can Horizon do?\r\n\r\nHorizon can:\r\n\r\n- Get and Set field and property values\r\n  - Both private as public, whether it's on a base class or not.\r\n- Get and Set values and guess if it's a property or field.\r\n  - In case you're not sure, or scared that the implementation in the third-party dll might change\r\n- Add event handlers\r\n- Remove them again!\r\n- Raise events\r\n- Get or Set indexers.\r\n  - With one or multiple parameters\r\n- Implicitly convert types\r\n  - Or just check if it's possible.\r\n- Create instances\r\n  - With or without parameters.\r\n- And most importantly: Call methods!\r\n- With safe to use `Try` variants for each method, in case your input is incorrect. \r\n  - Returns a bool instead, with possibly an `out` parameter.\r\n- Check if a field, property, event or method exists on the given type.\r\n\r\n## Setup as a submodule\r\n\r\n- Simple as using a `git` [command](http://git-scm.com/book/en/v2/Git-Tools-Submodules)!\r\n- Go to your project's folder.\r\n- Just run `git submodule add {{ site.source_link }}.git`\r\n\r\nAnd you're done! Ready, start, go! Back to work!\r\n\r\n-------------------------\r\n\r\n\r\n## Setup as standalone project\r\n\r\n- Horizon is also maintained as a DLL.\r\n\t- Or an actual project, if that's what you fancy!\r\n- Exposing only the absolute minimum!\r\n- For your pleasure…\r\n- Hop on over to [GitHub](https://github.com/StevenThuriot/Horizon-project) and get your fix, today!\r\n\r\n-------------------------\r\n\r\n\r\n## Setup using NuGet\r\n\r\n- Not quite there yet! \r\n- More to come later…\r\n\r\n## Getting Started with Horizon\r\n\r\n### The basics\r\n\r\nEverything you need is in the `Horizon` namespace, so start by including it\r\n\r\n```csharp\r\nusing Horizon;\r\n```\r\n\r\nThe easiest starting point is the static `Info` class. It requires a generic parameter. The generic is the type you want to query for info.\r\n\r\n```csharp\r\nInfo<T>\r\n```\r\n\r\nA static constructor will be loaded, caching the information about this type once. At this point, the execution trees won't be compiled just yet, to keep the hit as small as possible. A simple [`GetMembers`](https://msdn.microsoft.com/en-us/library/k2w5ey1e.aspx) call is launched to get all the available info for the current type. This is parsed and converted to metadata Horizon can understand and work with.\r\n\r\nImagine we want to resolve the value of the field `_randomField`.\r\n\r\n```csharp\r\nvar @class = new ClassWithFields();\r\nvar value = Info<T>.GetField(@class, \"_randomField\");\r\n```\r\n\r\nThe field getter will only now be compiled and cached. All the other getters will be left untouched. (In other words, they're lazy compiled).\r\n\r\nA generic type is not always a possibility. Horizon can also auto-resolve using an existing instance, instead. Continuing our previous example, it would look like this.\r\n\r\n```csharp\r\nvar value = Info.GetField(@class, \"_randomField\");\r\n```\r\n\r\nFor ease of use, it can also be invoked as an extension method.\r\n\r\n```csharp\r\nvar value = @class.GetField(\"_randomField\");\r\n```\r\n\r\nFor obvious reasons, auto-resolving the type will have a small (almost non-existing) overhead compared to the generic call.\r\n\r\n### Extended Info\r\n\r\nExtended info is also available, which can be found in a static subclass.\r\n\r\n```csharp\r\nInfo<T>.Extended\r\n```\r\n\r\nThis static class contains a list of all the metadata Horizon is using for that type. (Methods, properties, constructors, etc)\r\n\r\nJust like the normal `Info` class, the `Extended` class allows you to auto-resolve the type.\r\n\r\n```csharp\r\nInfo.Extended.Fields(@class);\r\n```\r\n\r\nThis class also allows you to pass a `Type` instead of an instance, in case you don't have one yet.\r\n\r\n```csharp\r\nInfo.Extended.Fields(typeof (ClassWithFields));\r\n```\r\n\r\nOf course, this caller will have an added performance hit since it will try to resolve the metadata through the normal handler. This way it is shared between the two. The expression tree to resolve the data will be cached, so it will be a one-time hit.\r\n\r\n### DLR\r\n\r\nHorizon supports .NET's DLR. This means a lot of the calls on the `Info` class have an overload that accept an implementation of the [`CallSiteBinder`](https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.callsitebinder.aspx).\r\n\r\nIn a nutshell, this means it's very easy to plug `Horizon` into any of your projects that uses [`DynamicObject`](https://msdn.microsoft.com/en-us/library/system.dynamic.dynamicobject.aspx) implementations.\r\n\r\n\r\n### The real fancy stuff\r\n\r\nFor simple calls, like getting values from fields and properties, an `Expression Tree` will be compiled and cached. After compilation, the execution hit is barely slower than making the actual call.\r\n\r\nFor more advanced calls, like methods that have named arguments and parameters with default values, a `CallSiteBinder` will be constructed, just like the DLR does! That makes it just as snappy as working with a regular dynamic object.\r\n\r\nHorizon is smart enough to find the correct overload to use when calling a method, even if it means having to implicitely cast an instance first. When calling a method that requires more parameters than supplied, it will check for default values first. Named arguments are also supported, so it's possible to swap instances around, just like in regular C# code.\r\n\r\n### Actually calling a method...\r\n\r\n...Would look a little like this for a method without parameters (or one that has all defaultValues filled in):\r\n\r\n```csharp\r\nvar value = @class.Call(\"MyMethod\");\r\n```\r\n\r\nOr like this, in case you pass values:\r\n\r\n```csharp\r\nvar value = @class.Call(\"MyMethodWithParameters\", 1, \"one\", new OtherParameterClass());\r\n```\r\n\r\nWhen passing the `CallSiteBinder`, it will use named arguments as well. This is a sample that could be used when overriding `DynamicObject`.\t\t\r\n\r\n```csharp\r\npublic override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)\t\t\r\n\t\t\r\n  object output;\t\t\r\n  if (_realInstance.TryCall(binder, args, out output))\t\t\r\n  {\t\t\r\n    result = output;\t\t\r\n    return true;\t\t\r\n  }\t\t\r\n\t\t\r\n  result = null;\t\t\r\n  return false;\t\t\r\n}\t\t\r\n\t\t\r\n```\t\t\r\n\t\t\r\nHorizon will resolve the passed arguments from the binder and will call the correct overload. If the method returns a value, it will be passed as well. If not, it will pass `null`.\r\n\r\n### Static Classes\r\n\r\nHorizon also supports `static` classes, but you can't use these as a generic for our `Info<>` class. \r\nFor `static` classes, we can use the `Info.Static` section instead. It has (most of the) same methods as our normal `Info` class.\r\n\r\ne.g. : You can use Horizon as follows to set the value of a static property in a static class\r\n\r\n```csharp\r\nInfo.Static.SetProperty(typeof(StaticClass), \"MyProperty\", \"This is the new value\");\r\n```\r\n\r\n## Contributing to Horizon\r\n\r\nWant to hack on Horizon? Awesome! We'd love for you to contribute to our source code and to make Horizon even better than it is today!\r\n\r\n-------------------------\r\n\r\n\r\n### Got a Question or Problem?\r\n\r\nIf you have questions about how to use Horizon, feel free to contact through [GitHub][issues].\r\n\r\n### Found an Issue?\r\n\r\nIf you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our [GitHub Repository][github]. \r\n\r\nEven better, you can submit a Pull Request with a fix.\r\n\r\n-------------------------\r\n\r\n\r\n### Want a Feature?\r\n\r\nYou can request a new feature by submitting an issue to our [GitHub Repository][github]. \r\n\r\nPull Request will also be accepted!\r\n\r\n-------------------------\r\n\r\n\r\n### Submitting a Pull Request\r\nBefore you submit your pull request consider the following:\r\n\r\nSearch [GitHub][pulls] for an open or closed Pull Request that relates to your submission. You don't want to duplicate effort.\r\n\r\nMake your changes in a new git branch:\r\n\r\n```\r\ngit checkout -b my-fix-branch master\r\n```\r\n\r\nCommit your changes using a descriptive commit message.\r\n\r\n```\r\ngit commit -a\r\n```\r\n\r\nNote: the optional commit `-a` command line option will automatically \"add\" and \"rm\" edited files.\r\n\r\nPush your branch to GitHub:\r\n\r\n```\r\ngit push origin my-fix-branch\r\n```\r\n\r\nIn GitHub, send a pull request to `Horizon:master`.\r\nIf we suggest changes then:\r\n* Make the required updates.\r\n* Rebase your branch and force push to your GitHub repository (this will update your Pull Request):\r\n\r\n```\r\ngit rebase master -i\r\ngit push origin my-fix-branch -f\r\n```\r\n\r\nThat's it! Thank you for your contribution!\r\n\r\n#### After your pull request is merged\r\n\r\nAfter your pull request is merged, you can safely delete your branch and pull the changes\r\nfrom the main (upstream) repository:\r\n\r\nDelete the remote branch on GitHub either through the GitHub web UI or your local shell as follows:\r\n\r\n```\r\ngit push origin --delete my-fix-branch\r\n```\r\n\r\nCheck out the master branch:\r\n\r\n```\r\ngit checkout master -f\r\n```\r\n\r\nDelete the local branch:\r\n\r\n```\r\ngit branch -D my-fix-branch\r\n```\r\n\r\nUpdate your master with the latest upstream version:\r\n\r\n```\r\ngit pull --ff upstream master\r\n```\r\n\r\n[github]: https://github.com/StevenThuriot/Horizon\r\n[issues]: https://github.com/StevenThuriot/Horizon/issues\r\n[pulls]: https://github.com/StevenThuriot/Horizon/pulls\r\n\r\n## Projects Currently Using Horizon\r\n\r\nIf you want to see a real-life sample of Horizon at work, you can hop over to any of the following projects:\r\n\r\n* [Falsy](//github.com/StevenThuriot/Falsy)\r\n* [ErrorCode](//github.com/StevenThuriot/ErrorCode)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}